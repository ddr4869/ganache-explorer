// Code generated by ent, DO NOT EDIT.

package block

import (
	"entgo.io/ent/dialect/sql"
	"github.com/ddr4869/ether-go/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Block {
	return predicate.Block(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Block {
	return predicate.Block(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Block {
	return predicate.Block(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Block {
	return predicate.Block(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Block {
	return predicate.Block(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Block {
	return predicate.Block(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Block {
	return predicate.Block(sql.FieldLTE(FieldID, id))
}

// Number applies equality check predicate on the "number" field. It's identical to NumberEQ.
func Number(v int) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldNumber, v))
}

// GasLimit applies equality check predicate on the "gas_limit" field. It's identical to GasLimitEQ.
func GasLimit(v int) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldGasLimit, v))
}

// GasUsed applies equality check predicate on the "gas_used" field. It's identical to GasUsedEQ.
func GasUsed(v int) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldGasUsed, v))
}

// Difficulty applies equality check predicate on the "difficulty" field. It's identical to DifficultyEQ.
func Difficulty(v int) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldDifficulty, v))
}

// Time applies equality check predicate on the "time" field. It's identical to TimeEQ.
func Time(v uint64) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldTime, v))
}

// NumberU64 applies equality check predicate on the "number_u64" field. It's identical to NumberU64EQ.
func NumberU64(v uint64) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldNumberU64, v))
}

// MixDigest applies equality check predicate on the "mix_digest" field. It's identical to MixDigestEQ.
func MixDigest(v string) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldMixDigest, v))
}

// Nonce applies equality check predicate on the "nonce" field. It's identical to NonceEQ.
func Nonce(v int) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldNonce, v))
}

// Coinbase applies equality check predicate on the "coinbase" field. It's identical to CoinbaseEQ.
func Coinbase(v string) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldCoinbase, v))
}

// Root applies equality check predicate on the "root" field. It's identical to RootEQ.
func Root(v string) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldRoot, v))
}

// ParentHash applies equality check predicate on the "parent_hash" field. It's identical to ParentHashEQ.
func ParentHash(v string) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldParentHash, v))
}

// TxHash applies equality check predicate on the "tx_hash" field. It's identical to TxHashEQ.
func TxHash(v string) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldTxHash, v))
}

// ReceiptHash applies equality check predicate on the "receipt_hash" field. It's identical to ReceiptHashEQ.
func ReceiptHash(v string) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldReceiptHash, v))
}

// UncleHash applies equality check predicate on the "uncle_hash" field. It's identical to UncleHashEQ.
func UncleHash(v string) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldUncleHash, v))
}

// TxCount applies equality check predicate on the "tx_count" field. It's identical to TxCountEQ.
func TxCount(v int) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldTxCount, v))
}

// NumberEQ applies the EQ predicate on the "number" field.
func NumberEQ(v int) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldNumber, v))
}

// NumberNEQ applies the NEQ predicate on the "number" field.
func NumberNEQ(v int) predicate.Block {
	return predicate.Block(sql.FieldNEQ(FieldNumber, v))
}

// NumberIn applies the In predicate on the "number" field.
func NumberIn(vs ...int) predicate.Block {
	return predicate.Block(sql.FieldIn(FieldNumber, vs...))
}

// NumberNotIn applies the NotIn predicate on the "number" field.
func NumberNotIn(vs ...int) predicate.Block {
	return predicate.Block(sql.FieldNotIn(FieldNumber, vs...))
}

// NumberGT applies the GT predicate on the "number" field.
func NumberGT(v int) predicate.Block {
	return predicate.Block(sql.FieldGT(FieldNumber, v))
}

// NumberGTE applies the GTE predicate on the "number" field.
func NumberGTE(v int) predicate.Block {
	return predicate.Block(sql.FieldGTE(FieldNumber, v))
}

// NumberLT applies the LT predicate on the "number" field.
func NumberLT(v int) predicate.Block {
	return predicate.Block(sql.FieldLT(FieldNumber, v))
}

// NumberLTE applies the LTE predicate on the "number" field.
func NumberLTE(v int) predicate.Block {
	return predicate.Block(sql.FieldLTE(FieldNumber, v))
}

// GasLimitEQ applies the EQ predicate on the "gas_limit" field.
func GasLimitEQ(v int) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldGasLimit, v))
}

// GasLimitNEQ applies the NEQ predicate on the "gas_limit" field.
func GasLimitNEQ(v int) predicate.Block {
	return predicate.Block(sql.FieldNEQ(FieldGasLimit, v))
}

// GasLimitIn applies the In predicate on the "gas_limit" field.
func GasLimitIn(vs ...int) predicate.Block {
	return predicate.Block(sql.FieldIn(FieldGasLimit, vs...))
}

// GasLimitNotIn applies the NotIn predicate on the "gas_limit" field.
func GasLimitNotIn(vs ...int) predicate.Block {
	return predicate.Block(sql.FieldNotIn(FieldGasLimit, vs...))
}

// GasLimitGT applies the GT predicate on the "gas_limit" field.
func GasLimitGT(v int) predicate.Block {
	return predicate.Block(sql.FieldGT(FieldGasLimit, v))
}

// GasLimitGTE applies the GTE predicate on the "gas_limit" field.
func GasLimitGTE(v int) predicate.Block {
	return predicate.Block(sql.FieldGTE(FieldGasLimit, v))
}

// GasLimitLT applies the LT predicate on the "gas_limit" field.
func GasLimitLT(v int) predicate.Block {
	return predicate.Block(sql.FieldLT(FieldGasLimit, v))
}

// GasLimitLTE applies the LTE predicate on the "gas_limit" field.
func GasLimitLTE(v int) predicate.Block {
	return predicate.Block(sql.FieldLTE(FieldGasLimit, v))
}

// GasUsedEQ applies the EQ predicate on the "gas_used" field.
func GasUsedEQ(v int) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldGasUsed, v))
}

// GasUsedNEQ applies the NEQ predicate on the "gas_used" field.
func GasUsedNEQ(v int) predicate.Block {
	return predicate.Block(sql.FieldNEQ(FieldGasUsed, v))
}

// GasUsedIn applies the In predicate on the "gas_used" field.
func GasUsedIn(vs ...int) predicate.Block {
	return predicate.Block(sql.FieldIn(FieldGasUsed, vs...))
}

// GasUsedNotIn applies the NotIn predicate on the "gas_used" field.
func GasUsedNotIn(vs ...int) predicate.Block {
	return predicate.Block(sql.FieldNotIn(FieldGasUsed, vs...))
}

// GasUsedGT applies the GT predicate on the "gas_used" field.
func GasUsedGT(v int) predicate.Block {
	return predicate.Block(sql.FieldGT(FieldGasUsed, v))
}

// GasUsedGTE applies the GTE predicate on the "gas_used" field.
func GasUsedGTE(v int) predicate.Block {
	return predicate.Block(sql.FieldGTE(FieldGasUsed, v))
}

// GasUsedLT applies the LT predicate on the "gas_used" field.
func GasUsedLT(v int) predicate.Block {
	return predicate.Block(sql.FieldLT(FieldGasUsed, v))
}

// GasUsedLTE applies the LTE predicate on the "gas_used" field.
func GasUsedLTE(v int) predicate.Block {
	return predicate.Block(sql.FieldLTE(FieldGasUsed, v))
}

// DifficultyEQ applies the EQ predicate on the "difficulty" field.
func DifficultyEQ(v int) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldDifficulty, v))
}

// DifficultyNEQ applies the NEQ predicate on the "difficulty" field.
func DifficultyNEQ(v int) predicate.Block {
	return predicate.Block(sql.FieldNEQ(FieldDifficulty, v))
}

// DifficultyIn applies the In predicate on the "difficulty" field.
func DifficultyIn(vs ...int) predicate.Block {
	return predicate.Block(sql.FieldIn(FieldDifficulty, vs...))
}

// DifficultyNotIn applies the NotIn predicate on the "difficulty" field.
func DifficultyNotIn(vs ...int) predicate.Block {
	return predicate.Block(sql.FieldNotIn(FieldDifficulty, vs...))
}

// DifficultyGT applies the GT predicate on the "difficulty" field.
func DifficultyGT(v int) predicate.Block {
	return predicate.Block(sql.FieldGT(FieldDifficulty, v))
}

// DifficultyGTE applies the GTE predicate on the "difficulty" field.
func DifficultyGTE(v int) predicate.Block {
	return predicate.Block(sql.FieldGTE(FieldDifficulty, v))
}

// DifficultyLT applies the LT predicate on the "difficulty" field.
func DifficultyLT(v int) predicate.Block {
	return predicate.Block(sql.FieldLT(FieldDifficulty, v))
}

// DifficultyLTE applies the LTE predicate on the "difficulty" field.
func DifficultyLTE(v int) predicate.Block {
	return predicate.Block(sql.FieldLTE(FieldDifficulty, v))
}

// TimeEQ applies the EQ predicate on the "time" field.
func TimeEQ(v uint64) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldTime, v))
}

// TimeNEQ applies the NEQ predicate on the "time" field.
func TimeNEQ(v uint64) predicate.Block {
	return predicate.Block(sql.FieldNEQ(FieldTime, v))
}

// TimeIn applies the In predicate on the "time" field.
func TimeIn(vs ...uint64) predicate.Block {
	return predicate.Block(sql.FieldIn(FieldTime, vs...))
}

// TimeNotIn applies the NotIn predicate on the "time" field.
func TimeNotIn(vs ...uint64) predicate.Block {
	return predicate.Block(sql.FieldNotIn(FieldTime, vs...))
}

// TimeGT applies the GT predicate on the "time" field.
func TimeGT(v uint64) predicate.Block {
	return predicate.Block(sql.FieldGT(FieldTime, v))
}

// TimeGTE applies the GTE predicate on the "time" field.
func TimeGTE(v uint64) predicate.Block {
	return predicate.Block(sql.FieldGTE(FieldTime, v))
}

// TimeLT applies the LT predicate on the "time" field.
func TimeLT(v uint64) predicate.Block {
	return predicate.Block(sql.FieldLT(FieldTime, v))
}

// TimeLTE applies the LTE predicate on the "time" field.
func TimeLTE(v uint64) predicate.Block {
	return predicate.Block(sql.FieldLTE(FieldTime, v))
}

// NumberU64EQ applies the EQ predicate on the "number_u64" field.
func NumberU64EQ(v uint64) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldNumberU64, v))
}

// NumberU64NEQ applies the NEQ predicate on the "number_u64" field.
func NumberU64NEQ(v uint64) predicate.Block {
	return predicate.Block(sql.FieldNEQ(FieldNumberU64, v))
}

// NumberU64In applies the In predicate on the "number_u64" field.
func NumberU64In(vs ...uint64) predicate.Block {
	return predicate.Block(sql.FieldIn(FieldNumberU64, vs...))
}

// NumberU64NotIn applies the NotIn predicate on the "number_u64" field.
func NumberU64NotIn(vs ...uint64) predicate.Block {
	return predicate.Block(sql.FieldNotIn(FieldNumberU64, vs...))
}

// NumberU64GT applies the GT predicate on the "number_u64" field.
func NumberU64GT(v uint64) predicate.Block {
	return predicate.Block(sql.FieldGT(FieldNumberU64, v))
}

// NumberU64GTE applies the GTE predicate on the "number_u64" field.
func NumberU64GTE(v uint64) predicate.Block {
	return predicate.Block(sql.FieldGTE(FieldNumberU64, v))
}

// NumberU64LT applies the LT predicate on the "number_u64" field.
func NumberU64LT(v uint64) predicate.Block {
	return predicate.Block(sql.FieldLT(FieldNumberU64, v))
}

// NumberU64LTE applies the LTE predicate on the "number_u64" field.
func NumberU64LTE(v uint64) predicate.Block {
	return predicate.Block(sql.FieldLTE(FieldNumberU64, v))
}

// MixDigestEQ applies the EQ predicate on the "mix_digest" field.
func MixDigestEQ(v string) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldMixDigest, v))
}

// MixDigestNEQ applies the NEQ predicate on the "mix_digest" field.
func MixDigestNEQ(v string) predicate.Block {
	return predicate.Block(sql.FieldNEQ(FieldMixDigest, v))
}

// MixDigestIn applies the In predicate on the "mix_digest" field.
func MixDigestIn(vs ...string) predicate.Block {
	return predicate.Block(sql.FieldIn(FieldMixDigest, vs...))
}

// MixDigestNotIn applies the NotIn predicate on the "mix_digest" field.
func MixDigestNotIn(vs ...string) predicate.Block {
	return predicate.Block(sql.FieldNotIn(FieldMixDigest, vs...))
}

// MixDigestGT applies the GT predicate on the "mix_digest" field.
func MixDigestGT(v string) predicate.Block {
	return predicate.Block(sql.FieldGT(FieldMixDigest, v))
}

// MixDigestGTE applies the GTE predicate on the "mix_digest" field.
func MixDigestGTE(v string) predicate.Block {
	return predicate.Block(sql.FieldGTE(FieldMixDigest, v))
}

// MixDigestLT applies the LT predicate on the "mix_digest" field.
func MixDigestLT(v string) predicate.Block {
	return predicate.Block(sql.FieldLT(FieldMixDigest, v))
}

// MixDigestLTE applies the LTE predicate on the "mix_digest" field.
func MixDigestLTE(v string) predicate.Block {
	return predicate.Block(sql.FieldLTE(FieldMixDigest, v))
}

// MixDigestContains applies the Contains predicate on the "mix_digest" field.
func MixDigestContains(v string) predicate.Block {
	return predicate.Block(sql.FieldContains(FieldMixDigest, v))
}

// MixDigestHasPrefix applies the HasPrefix predicate on the "mix_digest" field.
func MixDigestHasPrefix(v string) predicate.Block {
	return predicate.Block(sql.FieldHasPrefix(FieldMixDigest, v))
}

// MixDigestHasSuffix applies the HasSuffix predicate on the "mix_digest" field.
func MixDigestHasSuffix(v string) predicate.Block {
	return predicate.Block(sql.FieldHasSuffix(FieldMixDigest, v))
}

// MixDigestEqualFold applies the EqualFold predicate on the "mix_digest" field.
func MixDigestEqualFold(v string) predicate.Block {
	return predicate.Block(sql.FieldEqualFold(FieldMixDigest, v))
}

// MixDigestContainsFold applies the ContainsFold predicate on the "mix_digest" field.
func MixDigestContainsFold(v string) predicate.Block {
	return predicate.Block(sql.FieldContainsFold(FieldMixDigest, v))
}

// NonceEQ applies the EQ predicate on the "nonce" field.
func NonceEQ(v int) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldNonce, v))
}

// NonceNEQ applies the NEQ predicate on the "nonce" field.
func NonceNEQ(v int) predicate.Block {
	return predicate.Block(sql.FieldNEQ(FieldNonce, v))
}

// NonceIn applies the In predicate on the "nonce" field.
func NonceIn(vs ...int) predicate.Block {
	return predicate.Block(sql.FieldIn(FieldNonce, vs...))
}

// NonceNotIn applies the NotIn predicate on the "nonce" field.
func NonceNotIn(vs ...int) predicate.Block {
	return predicate.Block(sql.FieldNotIn(FieldNonce, vs...))
}

// NonceGT applies the GT predicate on the "nonce" field.
func NonceGT(v int) predicate.Block {
	return predicate.Block(sql.FieldGT(FieldNonce, v))
}

// NonceGTE applies the GTE predicate on the "nonce" field.
func NonceGTE(v int) predicate.Block {
	return predicate.Block(sql.FieldGTE(FieldNonce, v))
}

// NonceLT applies the LT predicate on the "nonce" field.
func NonceLT(v int) predicate.Block {
	return predicate.Block(sql.FieldLT(FieldNonce, v))
}

// NonceLTE applies the LTE predicate on the "nonce" field.
func NonceLTE(v int) predicate.Block {
	return predicate.Block(sql.FieldLTE(FieldNonce, v))
}

// CoinbaseEQ applies the EQ predicate on the "coinbase" field.
func CoinbaseEQ(v string) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldCoinbase, v))
}

// CoinbaseNEQ applies the NEQ predicate on the "coinbase" field.
func CoinbaseNEQ(v string) predicate.Block {
	return predicate.Block(sql.FieldNEQ(FieldCoinbase, v))
}

// CoinbaseIn applies the In predicate on the "coinbase" field.
func CoinbaseIn(vs ...string) predicate.Block {
	return predicate.Block(sql.FieldIn(FieldCoinbase, vs...))
}

// CoinbaseNotIn applies the NotIn predicate on the "coinbase" field.
func CoinbaseNotIn(vs ...string) predicate.Block {
	return predicate.Block(sql.FieldNotIn(FieldCoinbase, vs...))
}

// CoinbaseGT applies the GT predicate on the "coinbase" field.
func CoinbaseGT(v string) predicate.Block {
	return predicate.Block(sql.FieldGT(FieldCoinbase, v))
}

// CoinbaseGTE applies the GTE predicate on the "coinbase" field.
func CoinbaseGTE(v string) predicate.Block {
	return predicate.Block(sql.FieldGTE(FieldCoinbase, v))
}

// CoinbaseLT applies the LT predicate on the "coinbase" field.
func CoinbaseLT(v string) predicate.Block {
	return predicate.Block(sql.FieldLT(FieldCoinbase, v))
}

// CoinbaseLTE applies the LTE predicate on the "coinbase" field.
func CoinbaseLTE(v string) predicate.Block {
	return predicate.Block(sql.FieldLTE(FieldCoinbase, v))
}

// CoinbaseContains applies the Contains predicate on the "coinbase" field.
func CoinbaseContains(v string) predicate.Block {
	return predicate.Block(sql.FieldContains(FieldCoinbase, v))
}

// CoinbaseHasPrefix applies the HasPrefix predicate on the "coinbase" field.
func CoinbaseHasPrefix(v string) predicate.Block {
	return predicate.Block(sql.FieldHasPrefix(FieldCoinbase, v))
}

// CoinbaseHasSuffix applies the HasSuffix predicate on the "coinbase" field.
func CoinbaseHasSuffix(v string) predicate.Block {
	return predicate.Block(sql.FieldHasSuffix(FieldCoinbase, v))
}

// CoinbaseEqualFold applies the EqualFold predicate on the "coinbase" field.
func CoinbaseEqualFold(v string) predicate.Block {
	return predicate.Block(sql.FieldEqualFold(FieldCoinbase, v))
}

// CoinbaseContainsFold applies the ContainsFold predicate on the "coinbase" field.
func CoinbaseContainsFold(v string) predicate.Block {
	return predicate.Block(sql.FieldContainsFold(FieldCoinbase, v))
}

// RootEQ applies the EQ predicate on the "root" field.
func RootEQ(v string) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldRoot, v))
}

// RootNEQ applies the NEQ predicate on the "root" field.
func RootNEQ(v string) predicate.Block {
	return predicate.Block(sql.FieldNEQ(FieldRoot, v))
}

// RootIn applies the In predicate on the "root" field.
func RootIn(vs ...string) predicate.Block {
	return predicate.Block(sql.FieldIn(FieldRoot, vs...))
}

// RootNotIn applies the NotIn predicate on the "root" field.
func RootNotIn(vs ...string) predicate.Block {
	return predicate.Block(sql.FieldNotIn(FieldRoot, vs...))
}

// RootGT applies the GT predicate on the "root" field.
func RootGT(v string) predicate.Block {
	return predicate.Block(sql.FieldGT(FieldRoot, v))
}

// RootGTE applies the GTE predicate on the "root" field.
func RootGTE(v string) predicate.Block {
	return predicate.Block(sql.FieldGTE(FieldRoot, v))
}

// RootLT applies the LT predicate on the "root" field.
func RootLT(v string) predicate.Block {
	return predicate.Block(sql.FieldLT(FieldRoot, v))
}

// RootLTE applies the LTE predicate on the "root" field.
func RootLTE(v string) predicate.Block {
	return predicate.Block(sql.FieldLTE(FieldRoot, v))
}

// RootContains applies the Contains predicate on the "root" field.
func RootContains(v string) predicate.Block {
	return predicate.Block(sql.FieldContains(FieldRoot, v))
}

// RootHasPrefix applies the HasPrefix predicate on the "root" field.
func RootHasPrefix(v string) predicate.Block {
	return predicate.Block(sql.FieldHasPrefix(FieldRoot, v))
}

// RootHasSuffix applies the HasSuffix predicate on the "root" field.
func RootHasSuffix(v string) predicate.Block {
	return predicate.Block(sql.FieldHasSuffix(FieldRoot, v))
}

// RootEqualFold applies the EqualFold predicate on the "root" field.
func RootEqualFold(v string) predicate.Block {
	return predicate.Block(sql.FieldEqualFold(FieldRoot, v))
}

// RootContainsFold applies the ContainsFold predicate on the "root" field.
func RootContainsFold(v string) predicate.Block {
	return predicate.Block(sql.FieldContainsFold(FieldRoot, v))
}

// ParentHashEQ applies the EQ predicate on the "parent_hash" field.
func ParentHashEQ(v string) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldParentHash, v))
}

// ParentHashNEQ applies the NEQ predicate on the "parent_hash" field.
func ParentHashNEQ(v string) predicate.Block {
	return predicate.Block(sql.FieldNEQ(FieldParentHash, v))
}

// ParentHashIn applies the In predicate on the "parent_hash" field.
func ParentHashIn(vs ...string) predicate.Block {
	return predicate.Block(sql.FieldIn(FieldParentHash, vs...))
}

// ParentHashNotIn applies the NotIn predicate on the "parent_hash" field.
func ParentHashNotIn(vs ...string) predicate.Block {
	return predicate.Block(sql.FieldNotIn(FieldParentHash, vs...))
}

// ParentHashGT applies the GT predicate on the "parent_hash" field.
func ParentHashGT(v string) predicate.Block {
	return predicate.Block(sql.FieldGT(FieldParentHash, v))
}

// ParentHashGTE applies the GTE predicate on the "parent_hash" field.
func ParentHashGTE(v string) predicate.Block {
	return predicate.Block(sql.FieldGTE(FieldParentHash, v))
}

// ParentHashLT applies the LT predicate on the "parent_hash" field.
func ParentHashLT(v string) predicate.Block {
	return predicate.Block(sql.FieldLT(FieldParentHash, v))
}

// ParentHashLTE applies the LTE predicate on the "parent_hash" field.
func ParentHashLTE(v string) predicate.Block {
	return predicate.Block(sql.FieldLTE(FieldParentHash, v))
}

// ParentHashContains applies the Contains predicate on the "parent_hash" field.
func ParentHashContains(v string) predicate.Block {
	return predicate.Block(sql.FieldContains(FieldParentHash, v))
}

// ParentHashHasPrefix applies the HasPrefix predicate on the "parent_hash" field.
func ParentHashHasPrefix(v string) predicate.Block {
	return predicate.Block(sql.FieldHasPrefix(FieldParentHash, v))
}

// ParentHashHasSuffix applies the HasSuffix predicate on the "parent_hash" field.
func ParentHashHasSuffix(v string) predicate.Block {
	return predicate.Block(sql.FieldHasSuffix(FieldParentHash, v))
}

// ParentHashEqualFold applies the EqualFold predicate on the "parent_hash" field.
func ParentHashEqualFold(v string) predicate.Block {
	return predicate.Block(sql.FieldEqualFold(FieldParentHash, v))
}

// ParentHashContainsFold applies the ContainsFold predicate on the "parent_hash" field.
func ParentHashContainsFold(v string) predicate.Block {
	return predicate.Block(sql.FieldContainsFold(FieldParentHash, v))
}

// TxHashEQ applies the EQ predicate on the "tx_hash" field.
func TxHashEQ(v string) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldTxHash, v))
}

// TxHashNEQ applies the NEQ predicate on the "tx_hash" field.
func TxHashNEQ(v string) predicate.Block {
	return predicate.Block(sql.FieldNEQ(FieldTxHash, v))
}

// TxHashIn applies the In predicate on the "tx_hash" field.
func TxHashIn(vs ...string) predicate.Block {
	return predicate.Block(sql.FieldIn(FieldTxHash, vs...))
}

// TxHashNotIn applies the NotIn predicate on the "tx_hash" field.
func TxHashNotIn(vs ...string) predicate.Block {
	return predicate.Block(sql.FieldNotIn(FieldTxHash, vs...))
}

// TxHashGT applies the GT predicate on the "tx_hash" field.
func TxHashGT(v string) predicate.Block {
	return predicate.Block(sql.FieldGT(FieldTxHash, v))
}

// TxHashGTE applies the GTE predicate on the "tx_hash" field.
func TxHashGTE(v string) predicate.Block {
	return predicate.Block(sql.FieldGTE(FieldTxHash, v))
}

// TxHashLT applies the LT predicate on the "tx_hash" field.
func TxHashLT(v string) predicate.Block {
	return predicate.Block(sql.FieldLT(FieldTxHash, v))
}

// TxHashLTE applies the LTE predicate on the "tx_hash" field.
func TxHashLTE(v string) predicate.Block {
	return predicate.Block(sql.FieldLTE(FieldTxHash, v))
}

// TxHashContains applies the Contains predicate on the "tx_hash" field.
func TxHashContains(v string) predicate.Block {
	return predicate.Block(sql.FieldContains(FieldTxHash, v))
}

// TxHashHasPrefix applies the HasPrefix predicate on the "tx_hash" field.
func TxHashHasPrefix(v string) predicate.Block {
	return predicate.Block(sql.FieldHasPrefix(FieldTxHash, v))
}

// TxHashHasSuffix applies the HasSuffix predicate on the "tx_hash" field.
func TxHashHasSuffix(v string) predicate.Block {
	return predicate.Block(sql.FieldHasSuffix(FieldTxHash, v))
}

// TxHashEqualFold applies the EqualFold predicate on the "tx_hash" field.
func TxHashEqualFold(v string) predicate.Block {
	return predicate.Block(sql.FieldEqualFold(FieldTxHash, v))
}

// TxHashContainsFold applies the ContainsFold predicate on the "tx_hash" field.
func TxHashContainsFold(v string) predicate.Block {
	return predicate.Block(sql.FieldContainsFold(FieldTxHash, v))
}

// ReceiptHashEQ applies the EQ predicate on the "receipt_hash" field.
func ReceiptHashEQ(v string) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldReceiptHash, v))
}

// ReceiptHashNEQ applies the NEQ predicate on the "receipt_hash" field.
func ReceiptHashNEQ(v string) predicate.Block {
	return predicate.Block(sql.FieldNEQ(FieldReceiptHash, v))
}

// ReceiptHashIn applies the In predicate on the "receipt_hash" field.
func ReceiptHashIn(vs ...string) predicate.Block {
	return predicate.Block(sql.FieldIn(FieldReceiptHash, vs...))
}

// ReceiptHashNotIn applies the NotIn predicate on the "receipt_hash" field.
func ReceiptHashNotIn(vs ...string) predicate.Block {
	return predicate.Block(sql.FieldNotIn(FieldReceiptHash, vs...))
}

// ReceiptHashGT applies the GT predicate on the "receipt_hash" field.
func ReceiptHashGT(v string) predicate.Block {
	return predicate.Block(sql.FieldGT(FieldReceiptHash, v))
}

// ReceiptHashGTE applies the GTE predicate on the "receipt_hash" field.
func ReceiptHashGTE(v string) predicate.Block {
	return predicate.Block(sql.FieldGTE(FieldReceiptHash, v))
}

// ReceiptHashLT applies the LT predicate on the "receipt_hash" field.
func ReceiptHashLT(v string) predicate.Block {
	return predicate.Block(sql.FieldLT(FieldReceiptHash, v))
}

// ReceiptHashLTE applies the LTE predicate on the "receipt_hash" field.
func ReceiptHashLTE(v string) predicate.Block {
	return predicate.Block(sql.FieldLTE(FieldReceiptHash, v))
}

// ReceiptHashContains applies the Contains predicate on the "receipt_hash" field.
func ReceiptHashContains(v string) predicate.Block {
	return predicate.Block(sql.FieldContains(FieldReceiptHash, v))
}

// ReceiptHashHasPrefix applies the HasPrefix predicate on the "receipt_hash" field.
func ReceiptHashHasPrefix(v string) predicate.Block {
	return predicate.Block(sql.FieldHasPrefix(FieldReceiptHash, v))
}

// ReceiptHashHasSuffix applies the HasSuffix predicate on the "receipt_hash" field.
func ReceiptHashHasSuffix(v string) predicate.Block {
	return predicate.Block(sql.FieldHasSuffix(FieldReceiptHash, v))
}

// ReceiptHashEqualFold applies the EqualFold predicate on the "receipt_hash" field.
func ReceiptHashEqualFold(v string) predicate.Block {
	return predicate.Block(sql.FieldEqualFold(FieldReceiptHash, v))
}

// ReceiptHashContainsFold applies the ContainsFold predicate on the "receipt_hash" field.
func ReceiptHashContainsFold(v string) predicate.Block {
	return predicate.Block(sql.FieldContainsFold(FieldReceiptHash, v))
}

// UncleHashEQ applies the EQ predicate on the "uncle_hash" field.
func UncleHashEQ(v string) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldUncleHash, v))
}

// UncleHashNEQ applies the NEQ predicate on the "uncle_hash" field.
func UncleHashNEQ(v string) predicate.Block {
	return predicate.Block(sql.FieldNEQ(FieldUncleHash, v))
}

// UncleHashIn applies the In predicate on the "uncle_hash" field.
func UncleHashIn(vs ...string) predicate.Block {
	return predicate.Block(sql.FieldIn(FieldUncleHash, vs...))
}

// UncleHashNotIn applies the NotIn predicate on the "uncle_hash" field.
func UncleHashNotIn(vs ...string) predicate.Block {
	return predicate.Block(sql.FieldNotIn(FieldUncleHash, vs...))
}

// UncleHashGT applies the GT predicate on the "uncle_hash" field.
func UncleHashGT(v string) predicate.Block {
	return predicate.Block(sql.FieldGT(FieldUncleHash, v))
}

// UncleHashGTE applies the GTE predicate on the "uncle_hash" field.
func UncleHashGTE(v string) predicate.Block {
	return predicate.Block(sql.FieldGTE(FieldUncleHash, v))
}

// UncleHashLT applies the LT predicate on the "uncle_hash" field.
func UncleHashLT(v string) predicate.Block {
	return predicate.Block(sql.FieldLT(FieldUncleHash, v))
}

// UncleHashLTE applies the LTE predicate on the "uncle_hash" field.
func UncleHashLTE(v string) predicate.Block {
	return predicate.Block(sql.FieldLTE(FieldUncleHash, v))
}

// UncleHashContains applies the Contains predicate on the "uncle_hash" field.
func UncleHashContains(v string) predicate.Block {
	return predicate.Block(sql.FieldContains(FieldUncleHash, v))
}

// UncleHashHasPrefix applies the HasPrefix predicate on the "uncle_hash" field.
func UncleHashHasPrefix(v string) predicate.Block {
	return predicate.Block(sql.FieldHasPrefix(FieldUncleHash, v))
}

// UncleHashHasSuffix applies the HasSuffix predicate on the "uncle_hash" field.
func UncleHashHasSuffix(v string) predicate.Block {
	return predicate.Block(sql.FieldHasSuffix(FieldUncleHash, v))
}

// UncleHashEqualFold applies the EqualFold predicate on the "uncle_hash" field.
func UncleHashEqualFold(v string) predicate.Block {
	return predicate.Block(sql.FieldEqualFold(FieldUncleHash, v))
}

// UncleHashContainsFold applies the ContainsFold predicate on the "uncle_hash" field.
func UncleHashContainsFold(v string) predicate.Block {
	return predicate.Block(sql.FieldContainsFold(FieldUncleHash, v))
}

// TxCountEQ applies the EQ predicate on the "tx_count" field.
func TxCountEQ(v int) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldTxCount, v))
}

// TxCountNEQ applies the NEQ predicate on the "tx_count" field.
func TxCountNEQ(v int) predicate.Block {
	return predicate.Block(sql.FieldNEQ(FieldTxCount, v))
}

// TxCountIn applies the In predicate on the "tx_count" field.
func TxCountIn(vs ...int) predicate.Block {
	return predicate.Block(sql.FieldIn(FieldTxCount, vs...))
}

// TxCountNotIn applies the NotIn predicate on the "tx_count" field.
func TxCountNotIn(vs ...int) predicate.Block {
	return predicate.Block(sql.FieldNotIn(FieldTxCount, vs...))
}

// TxCountGT applies the GT predicate on the "tx_count" field.
func TxCountGT(v int) predicate.Block {
	return predicate.Block(sql.FieldGT(FieldTxCount, v))
}

// TxCountGTE applies the GTE predicate on the "tx_count" field.
func TxCountGTE(v int) predicate.Block {
	return predicate.Block(sql.FieldGTE(FieldTxCount, v))
}

// TxCountLT applies the LT predicate on the "tx_count" field.
func TxCountLT(v int) predicate.Block {
	return predicate.Block(sql.FieldLT(FieldTxCount, v))
}

// TxCountLTE applies the LTE predicate on the "tx_count" field.
func TxCountLTE(v int) predicate.Block {
	return predicate.Block(sql.FieldLTE(FieldTxCount, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Block) predicate.Block {
	return predicate.Block(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Block) predicate.Block {
	return predicate.Block(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Block) predicate.Block {
	return predicate.Block(sql.NotPredicates(p))
}
