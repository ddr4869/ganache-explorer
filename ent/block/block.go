// Code generated by ent, DO NOT EDIT.

package block

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the block type in the database.
	Label = "block"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldNumber holds the string denoting the number field in the database.
	FieldNumber = "number"
	// FieldGasLimit holds the string denoting the gas_limit field in the database.
	FieldGasLimit = "gas_limit"
	// FieldGasUsed holds the string denoting the gas_used field in the database.
	FieldGasUsed = "gas_used"
	// FieldDifficulty holds the string denoting the difficulty field in the database.
	FieldDifficulty = "difficulty"
	// FieldTime holds the string denoting the time field in the database.
	FieldTime = "time"
	// FieldNumberU64 holds the string denoting the number_u64 field in the database.
	FieldNumberU64 = "number_u64"
	// FieldMixDigest holds the string denoting the mix_digest field in the database.
	FieldMixDigest = "mix_digest"
	// FieldNonce holds the string denoting the nonce field in the database.
	FieldNonce = "nonce"
	// FieldCoinbase holds the string denoting the coinbase field in the database.
	FieldCoinbase = "coinbase"
	// FieldRoot holds the string denoting the root field in the database.
	FieldRoot = "root"
	// FieldParentHash holds the string denoting the parent_hash field in the database.
	FieldParentHash = "parent_hash"
	// FieldTxHash holds the string denoting the tx_hash field in the database.
	FieldTxHash = "tx_hash"
	// FieldReceiptHash holds the string denoting the receipt_hash field in the database.
	FieldReceiptHash = "receipt_hash"
	// FieldUncleHash holds the string denoting the uncle_hash field in the database.
	FieldUncleHash = "uncle_hash"
	// FieldTxCount holds the string denoting the tx_count field in the database.
	FieldTxCount = "tx_count"
	// Table holds the table name of the block in the database.
	Table = "blocks"
)

// Columns holds all SQL columns for block fields.
var Columns = []string{
	FieldID,
	FieldNumber,
	FieldGasLimit,
	FieldGasUsed,
	FieldDifficulty,
	FieldTime,
	FieldNumberU64,
	FieldMixDigest,
	FieldNonce,
	FieldCoinbase,
	FieldRoot,
	FieldParentHash,
	FieldTxHash,
	FieldReceiptHash,
	FieldUncleHash,
	FieldTxCount,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NumberValidator is a validator for the "number" field. It is called by the builders before save.
	NumberValidator func(int) error
)

// OrderOption defines the ordering options for the Block queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByNumber orders the results by the number field.
func ByNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNumber, opts...).ToFunc()
}

// ByGasLimit orders the results by the gas_limit field.
func ByGasLimit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGasLimit, opts...).ToFunc()
}

// ByGasUsed orders the results by the gas_used field.
func ByGasUsed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGasUsed, opts...).ToFunc()
}

// ByDifficulty orders the results by the difficulty field.
func ByDifficulty(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDifficulty, opts...).ToFunc()
}

// ByTime orders the results by the time field.
func ByTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTime, opts...).ToFunc()
}

// ByNumberU64 orders the results by the number_u64 field.
func ByNumberU64(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNumberU64, opts...).ToFunc()
}

// ByMixDigest orders the results by the mix_digest field.
func ByMixDigest(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMixDigest, opts...).ToFunc()
}

// ByNonce orders the results by the nonce field.
func ByNonce(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNonce, opts...).ToFunc()
}

// ByCoinbase orders the results by the coinbase field.
func ByCoinbase(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCoinbase, opts...).ToFunc()
}

// ByRoot orders the results by the root field.
func ByRoot(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRoot, opts...).ToFunc()
}

// ByParentHash orders the results by the parent_hash field.
func ByParentHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldParentHash, opts...).ToFunc()
}

// ByTxHash orders the results by the tx_hash field.
func ByTxHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTxHash, opts...).ToFunc()
}

// ByReceiptHash orders the results by the receipt_hash field.
func ByReceiptHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReceiptHash, opts...).ToFunc()
}

// ByUncleHash orders the results by the uncle_hash field.
func ByUncleHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUncleHash, opts...).ToFunc()
}

// ByTxCount orders the results by the tx_count field.
func ByTxCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTxCount, opts...).ToFunc()
}
