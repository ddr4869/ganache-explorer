// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ddr4869/ether-go/ent/block"
	"github.com/ddr4869/ether-go/ent/predicate"
	"github.com/ddr4869/ether-go/ent/transaction"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeBlock       = "Block"
	TypeTransaction = "Transaction"
)

// BlockMutation represents an operation that mutates the Block nodes in the graph.
type BlockMutation struct {
	config
	op            Op
	typ           string
	id            *int
	number        *int
	addnumber     *int
	gas_limit     *int
	addgas_limit  *int
	gas_used      *int
	addgas_used   *int
	difficulty    *int
	adddifficulty *int
	time          *uint64
	addtime       *int64
	number_u64    *uint64
	addnumber_u64 *int64
	mix_digest    *string
	nonce         *int
	addnonce      *int
	coinbase      *string
	root          *string
	parent_hash   *string
	tx_hash       *string
	receipt_hash  *string
	uncle_hash    *string
	tx_count      *int
	addtx_count   *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Block, error)
	predicates    []predicate.Block
}

var _ ent.Mutation = (*BlockMutation)(nil)

// blockOption allows management of the mutation configuration using functional options.
type blockOption func(*BlockMutation)

// newBlockMutation creates new mutation for the Block entity.
func newBlockMutation(c config, op Op, opts ...blockOption) *BlockMutation {
	m := &BlockMutation{
		config:        c,
		op:            op,
		typ:           TypeBlock,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBlockID sets the ID field of the mutation.
func withBlockID(id int) blockOption {
	return func(m *BlockMutation) {
		var (
			err   error
			once  sync.Once
			value *Block
		)
		m.oldValue = func(ctx context.Context) (*Block, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Block.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBlock sets the old Block of the mutation.
func withBlock(node *Block) blockOption {
	return func(m *BlockMutation) {
		m.oldValue = func(context.Context) (*Block, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BlockMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BlockMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *BlockMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *BlockMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Block.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetNumber sets the "number" field.
func (m *BlockMutation) SetNumber(i int) {
	m.number = &i
	m.addnumber = nil
}

// Number returns the value of the "number" field in the mutation.
func (m *BlockMutation) Number() (r int, exists bool) {
	v := m.number
	if v == nil {
		return
	}
	return *v, true
}

// OldNumber returns the old "number" field's value of the Block entity.
// If the Block object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BlockMutation) OldNumber(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNumber: %w", err)
	}
	return oldValue.Number, nil
}

// AddNumber adds i to the "number" field.
func (m *BlockMutation) AddNumber(i int) {
	if m.addnumber != nil {
		*m.addnumber += i
	} else {
		m.addnumber = &i
	}
}

// AddedNumber returns the value that was added to the "number" field in this mutation.
func (m *BlockMutation) AddedNumber() (r int, exists bool) {
	v := m.addnumber
	if v == nil {
		return
	}
	return *v, true
}

// ResetNumber resets all changes to the "number" field.
func (m *BlockMutation) ResetNumber() {
	m.number = nil
	m.addnumber = nil
}

// SetGasLimit sets the "gas_limit" field.
func (m *BlockMutation) SetGasLimit(i int) {
	m.gas_limit = &i
	m.addgas_limit = nil
}

// GasLimit returns the value of the "gas_limit" field in the mutation.
func (m *BlockMutation) GasLimit() (r int, exists bool) {
	v := m.gas_limit
	if v == nil {
		return
	}
	return *v, true
}

// OldGasLimit returns the old "gas_limit" field's value of the Block entity.
// If the Block object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BlockMutation) OldGasLimit(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGasLimit is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGasLimit requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGasLimit: %w", err)
	}
	return oldValue.GasLimit, nil
}

// AddGasLimit adds i to the "gas_limit" field.
func (m *BlockMutation) AddGasLimit(i int) {
	if m.addgas_limit != nil {
		*m.addgas_limit += i
	} else {
		m.addgas_limit = &i
	}
}

// AddedGasLimit returns the value that was added to the "gas_limit" field in this mutation.
func (m *BlockMutation) AddedGasLimit() (r int, exists bool) {
	v := m.addgas_limit
	if v == nil {
		return
	}
	return *v, true
}

// ResetGasLimit resets all changes to the "gas_limit" field.
func (m *BlockMutation) ResetGasLimit() {
	m.gas_limit = nil
	m.addgas_limit = nil
}

// SetGasUsed sets the "gas_used" field.
func (m *BlockMutation) SetGasUsed(i int) {
	m.gas_used = &i
	m.addgas_used = nil
}

// GasUsed returns the value of the "gas_used" field in the mutation.
func (m *BlockMutation) GasUsed() (r int, exists bool) {
	v := m.gas_used
	if v == nil {
		return
	}
	return *v, true
}

// OldGasUsed returns the old "gas_used" field's value of the Block entity.
// If the Block object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BlockMutation) OldGasUsed(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGasUsed is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGasUsed requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGasUsed: %w", err)
	}
	return oldValue.GasUsed, nil
}

// AddGasUsed adds i to the "gas_used" field.
func (m *BlockMutation) AddGasUsed(i int) {
	if m.addgas_used != nil {
		*m.addgas_used += i
	} else {
		m.addgas_used = &i
	}
}

// AddedGasUsed returns the value that was added to the "gas_used" field in this mutation.
func (m *BlockMutation) AddedGasUsed() (r int, exists bool) {
	v := m.addgas_used
	if v == nil {
		return
	}
	return *v, true
}

// ResetGasUsed resets all changes to the "gas_used" field.
func (m *BlockMutation) ResetGasUsed() {
	m.gas_used = nil
	m.addgas_used = nil
}

// SetDifficulty sets the "difficulty" field.
func (m *BlockMutation) SetDifficulty(i int) {
	m.difficulty = &i
	m.adddifficulty = nil
}

// Difficulty returns the value of the "difficulty" field in the mutation.
func (m *BlockMutation) Difficulty() (r int, exists bool) {
	v := m.difficulty
	if v == nil {
		return
	}
	return *v, true
}

// OldDifficulty returns the old "difficulty" field's value of the Block entity.
// If the Block object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BlockMutation) OldDifficulty(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDifficulty is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDifficulty requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDifficulty: %w", err)
	}
	return oldValue.Difficulty, nil
}

// AddDifficulty adds i to the "difficulty" field.
func (m *BlockMutation) AddDifficulty(i int) {
	if m.adddifficulty != nil {
		*m.adddifficulty += i
	} else {
		m.adddifficulty = &i
	}
}

// AddedDifficulty returns the value that was added to the "difficulty" field in this mutation.
func (m *BlockMutation) AddedDifficulty() (r int, exists bool) {
	v := m.adddifficulty
	if v == nil {
		return
	}
	return *v, true
}

// ResetDifficulty resets all changes to the "difficulty" field.
func (m *BlockMutation) ResetDifficulty() {
	m.difficulty = nil
	m.adddifficulty = nil
}

// SetTime sets the "time" field.
func (m *BlockMutation) SetTime(u uint64) {
	m.time = &u
	m.addtime = nil
}

// Time returns the value of the "time" field in the mutation.
func (m *BlockMutation) Time() (r uint64, exists bool) {
	v := m.time
	if v == nil {
		return
	}
	return *v, true
}

// OldTime returns the old "time" field's value of the Block entity.
// If the Block object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BlockMutation) OldTime(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTime: %w", err)
	}
	return oldValue.Time, nil
}

// AddTime adds u to the "time" field.
func (m *BlockMutation) AddTime(u int64) {
	if m.addtime != nil {
		*m.addtime += u
	} else {
		m.addtime = &u
	}
}

// AddedTime returns the value that was added to the "time" field in this mutation.
func (m *BlockMutation) AddedTime() (r int64, exists bool) {
	v := m.addtime
	if v == nil {
		return
	}
	return *v, true
}

// ResetTime resets all changes to the "time" field.
func (m *BlockMutation) ResetTime() {
	m.time = nil
	m.addtime = nil
}

// SetNumberU64 sets the "number_u64" field.
func (m *BlockMutation) SetNumberU64(u uint64) {
	m.number_u64 = &u
	m.addnumber_u64 = nil
}

// NumberU64 returns the value of the "number_u64" field in the mutation.
func (m *BlockMutation) NumberU64() (r uint64, exists bool) {
	v := m.number_u64
	if v == nil {
		return
	}
	return *v, true
}

// OldNumberU64 returns the old "number_u64" field's value of the Block entity.
// If the Block object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BlockMutation) OldNumberU64(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNumberU64 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNumberU64 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNumberU64: %w", err)
	}
	return oldValue.NumberU64, nil
}

// AddNumberU64 adds u to the "number_u64" field.
func (m *BlockMutation) AddNumberU64(u int64) {
	if m.addnumber_u64 != nil {
		*m.addnumber_u64 += u
	} else {
		m.addnumber_u64 = &u
	}
}

// AddedNumberU64 returns the value that was added to the "number_u64" field in this mutation.
func (m *BlockMutation) AddedNumberU64() (r int64, exists bool) {
	v := m.addnumber_u64
	if v == nil {
		return
	}
	return *v, true
}

// ResetNumberU64 resets all changes to the "number_u64" field.
func (m *BlockMutation) ResetNumberU64() {
	m.number_u64 = nil
	m.addnumber_u64 = nil
}

// SetMixDigest sets the "mix_digest" field.
func (m *BlockMutation) SetMixDigest(s string) {
	m.mix_digest = &s
}

// MixDigest returns the value of the "mix_digest" field in the mutation.
func (m *BlockMutation) MixDigest() (r string, exists bool) {
	v := m.mix_digest
	if v == nil {
		return
	}
	return *v, true
}

// OldMixDigest returns the old "mix_digest" field's value of the Block entity.
// If the Block object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BlockMutation) OldMixDigest(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMixDigest is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMixDigest requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMixDigest: %w", err)
	}
	return oldValue.MixDigest, nil
}

// ResetMixDigest resets all changes to the "mix_digest" field.
func (m *BlockMutation) ResetMixDigest() {
	m.mix_digest = nil
}

// SetNonce sets the "nonce" field.
func (m *BlockMutation) SetNonce(i int) {
	m.nonce = &i
	m.addnonce = nil
}

// Nonce returns the value of the "nonce" field in the mutation.
func (m *BlockMutation) Nonce() (r int, exists bool) {
	v := m.nonce
	if v == nil {
		return
	}
	return *v, true
}

// OldNonce returns the old "nonce" field's value of the Block entity.
// If the Block object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BlockMutation) OldNonce(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNonce is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNonce requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNonce: %w", err)
	}
	return oldValue.Nonce, nil
}

// AddNonce adds i to the "nonce" field.
func (m *BlockMutation) AddNonce(i int) {
	if m.addnonce != nil {
		*m.addnonce += i
	} else {
		m.addnonce = &i
	}
}

// AddedNonce returns the value that was added to the "nonce" field in this mutation.
func (m *BlockMutation) AddedNonce() (r int, exists bool) {
	v := m.addnonce
	if v == nil {
		return
	}
	return *v, true
}

// ResetNonce resets all changes to the "nonce" field.
func (m *BlockMutation) ResetNonce() {
	m.nonce = nil
	m.addnonce = nil
}

// SetCoinbase sets the "coinbase" field.
func (m *BlockMutation) SetCoinbase(s string) {
	m.coinbase = &s
}

// Coinbase returns the value of the "coinbase" field in the mutation.
func (m *BlockMutation) Coinbase() (r string, exists bool) {
	v := m.coinbase
	if v == nil {
		return
	}
	return *v, true
}

// OldCoinbase returns the old "coinbase" field's value of the Block entity.
// If the Block object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BlockMutation) OldCoinbase(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCoinbase is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCoinbase requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCoinbase: %w", err)
	}
	return oldValue.Coinbase, nil
}

// ResetCoinbase resets all changes to the "coinbase" field.
func (m *BlockMutation) ResetCoinbase() {
	m.coinbase = nil
}

// SetRoot sets the "root" field.
func (m *BlockMutation) SetRoot(s string) {
	m.root = &s
}

// Root returns the value of the "root" field in the mutation.
func (m *BlockMutation) Root() (r string, exists bool) {
	v := m.root
	if v == nil {
		return
	}
	return *v, true
}

// OldRoot returns the old "root" field's value of the Block entity.
// If the Block object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BlockMutation) OldRoot(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRoot is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRoot requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRoot: %w", err)
	}
	return oldValue.Root, nil
}

// ResetRoot resets all changes to the "root" field.
func (m *BlockMutation) ResetRoot() {
	m.root = nil
}

// SetParentHash sets the "parent_hash" field.
func (m *BlockMutation) SetParentHash(s string) {
	m.parent_hash = &s
}

// ParentHash returns the value of the "parent_hash" field in the mutation.
func (m *BlockMutation) ParentHash() (r string, exists bool) {
	v := m.parent_hash
	if v == nil {
		return
	}
	return *v, true
}

// OldParentHash returns the old "parent_hash" field's value of the Block entity.
// If the Block object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BlockMutation) OldParentHash(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldParentHash is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldParentHash requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldParentHash: %w", err)
	}
	return oldValue.ParentHash, nil
}

// ResetParentHash resets all changes to the "parent_hash" field.
func (m *BlockMutation) ResetParentHash() {
	m.parent_hash = nil
}

// SetTxHash sets the "tx_hash" field.
func (m *BlockMutation) SetTxHash(s string) {
	m.tx_hash = &s
}

// TxHash returns the value of the "tx_hash" field in the mutation.
func (m *BlockMutation) TxHash() (r string, exists bool) {
	v := m.tx_hash
	if v == nil {
		return
	}
	return *v, true
}

// OldTxHash returns the old "tx_hash" field's value of the Block entity.
// If the Block object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BlockMutation) OldTxHash(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTxHash is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTxHash requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTxHash: %w", err)
	}
	return oldValue.TxHash, nil
}

// ResetTxHash resets all changes to the "tx_hash" field.
func (m *BlockMutation) ResetTxHash() {
	m.tx_hash = nil
}

// SetReceiptHash sets the "receipt_hash" field.
func (m *BlockMutation) SetReceiptHash(s string) {
	m.receipt_hash = &s
}

// ReceiptHash returns the value of the "receipt_hash" field in the mutation.
func (m *BlockMutation) ReceiptHash() (r string, exists bool) {
	v := m.receipt_hash
	if v == nil {
		return
	}
	return *v, true
}

// OldReceiptHash returns the old "receipt_hash" field's value of the Block entity.
// If the Block object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BlockMutation) OldReceiptHash(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReceiptHash is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReceiptHash requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReceiptHash: %w", err)
	}
	return oldValue.ReceiptHash, nil
}

// ResetReceiptHash resets all changes to the "receipt_hash" field.
func (m *BlockMutation) ResetReceiptHash() {
	m.receipt_hash = nil
}

// SetUncleHash sets the "uncle_hash" field.
func (m *BlockMutation) SetUncleHash(s string) {
	m.uncle_hash = &s
}

// UncleHash returns the value of the "uncle_hash" field in the mutation.
func (m *BlockMutation) UncleHash() (r string, exists bool) {
	v := m.uncle_hash
	if v == nil {
		return
	}
	return *v, true
}

// OldUncleHash returns the old "uncle_hash" field's value of the Block entity.
// If the Block object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BlockMutation) OldUncleHash(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUncleHash is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUncleHash requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUncleHash: %w", err)
	}
	return oldValue.UncleHash, nil
}

// ResetUncleHash resets all changes to the "uncle_hash" field.
func (m *BlockMutation) ResetUncleHash() {
	m.uncle_hash = nil
}

// SetTxCount sets the "tx_count" field.
func (m *BlockMutation) SetTxCount(i int) {
	m.tx_count = &i
	m.addtx_count = nil
}

// TxCount returns the value of the "tx_count" field in the mutation.
func (m *BlockMutation) TxCount() (r int, exists bool) {
	v := m.tx_count
	if v == nil {
		return
	}
	return *v, true
}

// OldTxCount returns the old "tx_count" field's value of the Block entity.
// If the Block object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BlockMutation) OldTxCount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTxCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTxCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTxCount: %w", err)
	}
	return oldValue.TxCount, nil
}

// AddTxCount adds i to the "tx_count" field.
func (m *BlockMutation) AddTxCount(i int) {
	if m.addtx_count != nil {
		*m.addtx_count += i
	} else {
		m.addtx_count = &i
	}
}

// AddedTxCount returns the value that was added to the "tx_count" field in this mutation.
func (m *BlockMutation) AddedTxCount() (r int, exists bool) {
	v := m.addtx_count
	if v == nil {
		return
	}
	return *v, true
}

// ResetTxCount resets all changes to the "tx_count" field.
func (m *BlockMutation) ResetTxCount() {
	m.tx_count = nil
	m.addtx_count = nil
}

// Where appends a list predicates to the BlockMutation builder.
func (m *BlockMutation) Where(ps ...predicate.Block) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the BlockMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *BlockMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Block, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *BlockMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *BlockMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Block).
func (m *BlockMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *BlockMutation) Fields() []string {
	fields := make([]string, 0, 15)
	if m.number != nil {
		fields = append(fields, block.FieldNumber)
	}
	if m.gas_limit != nil {
		fields = append(fields, block.FieldGasLimit)
	}
	if m.gas_used != nil {
		fields = append(fields, block.FieldGasUsed)
	}
	if m.difficulty != nil {
		fields = append(fields, block.FieldDifficulty)
	}
	if m.time != nil {
		fields = append(fields, block.FieldTime)
	}
	if m.number_u64 != nil {
		fields = append(fields, block.FieldNumberU64)
	}
	if m.mix_digest != nil {
		fields = append(fields, block.FieldMixDigest)
	}
	if m.nonce != nil {
		fields = append(fields, block.FieldNonce)
	}
	if m.coinbase != nil {
		fields = append(fields, block.FieldCoinbase)
	}
	if m.root != nil {
		fields = append(fields, block.FieldRoot)
	}
	if m.parent_hash != nil {
		fields = append(fields, block.FieldParentHash)
	}
	if m.tx_hash != nil {
		fields = append(fields, block.FieldTxHash)
	}
	if m.receipt_hash != nil {
		fields = append(fields, block.FieldReceiptHash)
	}
	if m.uncle_hash != nil {
		fields = append(fields, block.FieldUncleHash)
	}
	if m.tx_count != nil {
		fields = append(fields, block.FieldTxCount)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *BlockMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case block.FieldNumber:
		return m.Number()
	case block.FieldGasLimit:
		return m.GasLimit()
	case block.FieldGasUsed:
		return m.GasUsed()
	case block.FieldDifficulty:
		return m.Difficulty()
	case block.FieldTime:
		return m.Time()
	case block.FieldNumberU64:
		return m.NumberU64()
	case block.FieldMixDigest:
		return m.MixDigest()
	case block.FieldNonce:
		return m.Nonce()
	case block.FieldCoinbase:
		return m.Coinbase()
	case block.FieldRoot:
		return m.Root()
	case block.FieldParentHash:
		return m.ParentHash()
	case block.FieldTxHash:
		return m.TxHash()
	case block.FieldReceiptHash:
		return m.ReceiptHash()
	case block.FieldUncleHash:
		return m.UncleHash()
	case block.FieldTxCount:
		return m.TxCount()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *BlockMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case block.FieldNumber:
		return m.OldNumber(ctx)
	case block.FieldGasLimit:
		return m.OldGasLimit(ctx)
	case block.FieldGasUsed:
		return m.OldGasUsed(ctx)
	case block.FieldDifficulty:
		return m.OldDifficulty(ctx)
	case block.FieldTime:
		return m.OldTime(ctx)
	case block.FieldNumberU64:
		return m.OldNumberU64(ctx)
	case block.FieldMixDigest:
		return m.OldMixDigest(ctx)
	case block.FieldNonce:
		return m.OldNonce(ctx)
	case block.FieldCoinbase:
		return m.OldCoinbase(ctx)
	case block.FieldRoot:
		return m.OldRoot(ctx)
	case block.FieldParentHash:
		return m.OldParentHash(ctx)
	case block.FieldTxHash:
		return m.OldTxHash(ctx)
	case block.FieldReceiptHash:
		return m.OldReceiptHash(ctx)
	case block.FieldUncleHash:
		return m.OldUncleHash(ctx)
	case block.FieldTxCount:
		return m.OldTxCount(ctx)
	}
	return nil, fmt.Errorf("unknown Block field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BlockMutation) SetField(name string, value ent.Value) error {
	switch name {
	case block.FieldNumber:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNumber(v)
		return nil
	case block.FieldGasLimit:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGasLimit(v)
		return nil
	case block.FieldGasUsed:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGasUsed(v)
		return nil
	case block.FieldDifficulty:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDifficulty(v)
		return nil
	case block.FieldTime:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTime(v)
		return nil
	case block.FieldNumberU64:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNumberU64(v)
		return nil
	case block.FieldMixDigest:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMixDigest(v)
		return nil
	case block.FieldNonce:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNonce(v)
		return nil
	case block.FieldCoinbase:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCoinbase(v)
		return nil
	case block.FieldRoot:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRoot(v)
		return nil
	case block.FieldParentHash:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetParentHash(v)
		return nil
	case block.FieldTxHash:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTxHash(v)
		return nil
	case block.FieldReceiptHash:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReceiptHash(v)
		return nil
	case block.FieldUncleHash:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUncleHash(v)
		return nil
	case block.FieldTxCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTxCount(v)
		return nil
	}
	return fmt.Errorf("unknown Block field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *BlockMutation) AddedFields() []string {
	var fields []string
	if m.addnumber != nil {
		fields = append(fields, block.FieldNumber)
	}
	if m.addgas_limit != nil {
		fields = append(fields, block.FieldGasLimit)
	}
	if m.addgas_used != nil {
		fields = append(fields, block.FieldGasUsed)
	}
	if m.adddifficulty != nil {
		fields = append(fields, block.FieldDifficulty)
	}
	if m.addtime != nil {
		fields = append(fields, block.FieldTime)
	}
	if m.addnumber_u64 != nil {
		fields = append(fields, block.FieldNumberU64)
	}
	if m.addnonce != nil {
		fields = append(fields, block.FieldNonce)
	}
	if m.addtx_count != nil {
		fields = append(fields, block.FieldTxCount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *BlockMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case block.FieldNumber:
		return m.AddedNumber()
	case block.FieldGasLimit:
		return m.AddedGasLimit()
	case block.FieldGasUsed:
		return m.AddedGasUsed()
	case block.FieldDifficulty:
		return m.AddedDifficulty()
	case block.FieldTime:
		return m.AddedTime()
	case block.FieldNumberU64:
		return m.AddedNumberU64()
	case block.FieldNonce:
		return m.AddedNonce()
	case block.FieldTxCount:
		return m.AddedTxCount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BlockMutation) AddField(name string, value ent.Value) error {
	switch name {
	case block.FieldNumber:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddNumber(v)
		return nil
	case block.FieldGasLimit:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddGasLimit(v)
		return nil
	case block.FieldGasUsed:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddGasUsed(v)
		return nil
	case block.FieldDifficulty:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDifficulty(v)
		return nil
	case block.FieldTime:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTime(v)
		return nil
	case block.FieldNumberU64:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddNumberU64(v)
		return nil
	case block.FieldNonce:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddNonce(v)
		return nil
	case block.FieldTxCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTxCount(v)
		return nil
	}
	return fmt.Errorf("unknown Block numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *BlockMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *BlockMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *BlockMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Block nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *BlockMutation) ResetField(name string) error {
	switch name {
	case block.FieldNumber:
		m.ResetNumber()
		return nil
	case block.FieldGasLimit:
		m.ResetGasLimit()
		return nil
	case block.FieldGasUsed:
		m.ResetGasUsed()
		return nil
	case block.FieldDifficulty:
		m.ResetDifficulty()
		return nil
	case block.FieldTime:
		m.ResetTime()
		return nil
	case block.FieldNumberU64:
		m.ResetNumberU64()
		return nil
	case block.FieldMixDigest:
		m.ResetMixDigest()
		return nil
	case block.FieldNonce:
		m.ResetNonce()
		return nil
	case block.FieldCoinbase:
		m.ResetCoinbase()
		return nil
	case block.FieldRoot:
		m.ResetRoot()
		return nil
	case block.FieldParentHash:
		m.ResetParentHash()
		return nil
	case block.FieldTxHash:
		m.ResetTxHash()
		return nil
	case block.FieldReceiptHash:
		m.ResetReceiptHash()
		return nil
	case block.FieldUncleHash:
		m.ResetUncleHash()
		return nil
	case block.FieldTxCount:
		m.ResetTxCount()
		return nil
	}
	return fmt.Errorf("unknown Block field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *BlockMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *BlockMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *BlockMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *BlockMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *BlockMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *BlockMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *BlockMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Block unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *BlockMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Block edge %s", name)
}

// TransactionMutation represents an operation that mutates the Transaction nodes in the graph.
type TransactionMutation struct {
	config
	op            Op
	typ           string
	id            *int
	_type         *int
	add_type      *int
	chain_id      *int
	addchain_id   *int
	nonce         *int
	addnonce      *int
	to            *string
	gas           *int
	addgas        *int
	gasPrice      *string
	gasTipCap     *string
	gasFeeCap     *string
	value         *string
	data          *string
	hash          *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Transaction, error)
	predicates    []predicate.Transaction
}

var _ ent.Mutation = (*TransactionMutation)(nil)

// transactionOption allows management of the mutation configuration using functional options.
type transactionOption func(*TransactionMutation)

// newTransactionMutation creates new mutation for the Transaction entity.
func newTransactionMutation(c config, op Op, opts ...transactionOption) *TransactionMutation {
	m := &TransactionMutation{
		config:        c,
		op:            op,
		typ:           TypeTransaction,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTransactionID sets the ID field of the mutation.
func withTransactionID(id int) transactionOption {
	return func(m *TransactionMutation) {
		var (
			err   error
			once  sync.Once
			value *Transaction
		)
		m.oldValue = func(ctx context.Context) (*Transaction, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Transaction.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTransaction sets the old Transaction of the mutation.
func withTransaction(node *Transaction) transactionOption {
	return func(m *TransactionMutation) {
		m.oldValue = func(context.Context) (*Transaction, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TransactionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TransactionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TransactionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TransactionMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Transaction.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetType sets the "type" field.
func (m *TransactionMutation) SetType(i int) {
	m._type = &i
	m.add_type = nil
}

// GetType returns the value of the "type" field in the mutation.
func (m *TransactionMutation) GetType() (r int, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Transaction entity.
// If the Transaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransactionMutation) OldType(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// AddType adds i to the "type" field.
func (m *TransactionMutation) AddType(i int) {
	if m.add_type != nil {
		*m.add_type += i
	} else {
		m.add_type = &i
	}
}

// AddedType returns the value that was added to the "type" field in this mutation.
func (m *TransactionMutation) AddedType() (r int, exists bool) {
	v := m.add_type
	if v == nil {
		return
	}
	return *v, true
}

// ResetType resets all changes to the "type" field.
func (m *TransactionMutation) ResetType() {
	m._type = nil
	m.add_type = nil
}

// SetChainID sets the "chain_id" field.
func (m *TransactionMutation) SetChainID(i int) {
	m.chain_id = &i
	m.addchain_id = nil
}

// ChainID returns the value of the "chain_id" field in the mutation.
func (m *TransactionMutation) ChainID() (r int, exists bool) {
	v := m.chain_id
	if v == nil {
		return
	}
	return *v, true
}

// OldChainID returns the old "chain_id" field's value of the Transaction entity.
// If the Transaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransactionMutation) OldChainID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChainID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChainID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChainID: %w", err)
	}
	return oldValue.ChainID, nil
}

// AddChainID adds i to the "chain_id" field.
func (m *TransactionMutation) AddChainID(i int) {
	if m.addchain_id != nil {
		*m.addchain_id += i
	} else {
		m.addchain_id = &i
	}
}

// AddedChainID returns the value that was added to the "chain_id" field in this mutation.
func (m *TransactionMutation) AddedChainID() (r int, exists bool) {
	v := m.addchain_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetChainID resets all changes to the "chain_id" field.
func (m *TransactionMutation) ResetChainID() {
	m.chain_id = nil
	m.addchain_id = nil
}

// SetNonce sets the "nonce" field.
func (m *TransactionMutation) SetNonce(i int) {
	m.nonce = &i
	m.addnonce = nil
}

// Nonce returns the value of the "nonce" field in the mutation.
func (m *TransactionMutation) Nonce() (r int, exists bool) {
	v := m.nonce
	if v == nil {
		return
	}
	return *v, true
}

// OldNonce returns the old "nonce" field's value of the Transaction entity.
// If the Transaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransactionMutation) OldNonce(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNonce is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNonce requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNonce: %w", err)
	}
	return oldValue.Nonce, nil
}

// AddNonce adds i to the "nonce" field.
func (m *TransactionMutation) AddNonce(i int) {
	if m.addnonce != nil {
		*m.addnonce += i
	} else {
		m.addnonce = &i
	}
}

// AddedNonce returns the value that was added to the "nonce" field in this mutation.
func (m *TransactionMutation) AddedNonce() (r int, exists bool) {
	v := m.addnonce
	if v == nil {
		return
	}
	return *v, true
}

// ResetNonce resets all changes to the "nonce" field.
func (m *TransactionMutation) ResetNonce() {
	m.nonce = nil
	m.addnonce = nil
}

// SetTo sets the "to" field.
func (m *TransactionMutation) SetTo(s string) {
	m.to = &s
}

// To returns the value of the "to" field in the mutation.
func (m *TransactionMutation) To() (r string, exists bool) {
	v := m.to
	if v == nil {
		return
	}
	return *v, true
}

// OldTo returns the old "to" field's value of the Transaction entity.
// If the Transaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransactionMutation) OldTo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTo: %w", err)
	}
	return oldValue.To, nil
}

// ResetTo resets all changes to the "to" field.
func (m *TransactionMutation) ResetTo() {
	m.to = nil
}

// SetGas sets the "gas" field.
func (m *TransactionMutation) SetGas(i int) {
	m.gas = &i
	m.addgas = nil
}

// Gas returns the value of the "gas" field in the mutation.
func (m *TransactionMutation) Gas() (r int, exists bool) {
	v := m.gas
	if v == nil {
		return
	}
	return *v, true
}

// OldGas returns the old "gas" field's value of the Transaction entity.
// If the Transaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransactionMutation) OldGas(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGas is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGas requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGas: %w", err)
	}
	return oldValue.Gas, nil
}

// AddGas adds i to the "gas" field.
func (m *TransactionMutation) AddGas(i int) {
	if m.addgas != nil {
		*m.addgas += i
	} else {
		m.addgas = &i
	}
}

// AddedGas returns the value that was added to the "gas" field in this mutation.
func (m *TransactionMutation) AddedGas() (r int, exists bool) {
	v := m.addgas
	if v == nil {
		return
	}
	return *v, true
}

// ResetGas resets all changes to the "gas" field.
func (m *TransactionMutation) ResetGas() {
	m.gas = nil
	m.addgas = nil
}

// SetGasPrice sets the "gasPrice" field.
func (m *TransactionMutation) SetGasPrice(s string) {
	m.gasPrice = &s
}

// GasPrice returns the value of the "gasPrice" field in the mutation.
func (m *TransactionMutation) GasPrice() (r string, exists bool) {
	v := m.gasPrice
	if v == nil {
		return
	}
	return *v, true
}

// OldGasPrice returns the old "gasPrice" field's value of the Transaction entity.
// If the Transaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransactionMutation) OldGasPrice(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGasPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGasPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGasPrice: %w", err)
	}
	return oldValue.GasPrice, nil
}

// ResetGasPrice resets all changes to the "gasPrice" field.
func (m *TransactionMutation) ResetGasPrice() {
	m.gasPrice = nil
}

// SetGasTipCap sets the "gasTipCap" field.
func (m *TransactionMutation) SetGasTipCap(s string) {
	m.gasTipCap = &s
}

// GasTipCap returns the value of the "gasTipCap" field in the mutation.
func (m *TransactionMutation) GasTipCap() (r string, exists bool) {
	v := m.gasTipCap
	if v == nil {
		return
	}
	return *v, true
}

// OldGasTipCap returns the old "gasTipCap" field's value of the Transaction entity.
// If the Transaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransactionMutation) OldGasTipCap(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGasTipCap is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGasTipCap requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGasTipCap: %w", err)
	}
	return oldValue.GasTipCap, nil
}

// ResetGasTipCap resets all changes to the "gasTipCap" field.
func (m *TransactionMutation) ResetGasTipCap() {
	m.gasTipCap = nil
}

// SetGasFeeCap sets the "gasFeeCap" field.
func (m *TransactionMutation) SetGasFeeCap(s string) {
	m.gasFeeCap = &s
}

// GasFeeCap returns the value of the "gasFeeCap" field in the mutation.
func (m *TransactionMutation) GasFeeCap() (r string, exists bool) {
	v := m.gasFeeCap
	if v == nil {
		return
	}
	return *v, true
}

// OldGasFeeCap returns the old "gasFeeCap" field's value of the Transaction entity.
// If the Transaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransactionMutation) OldGasFeeCap(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGasFeeCap is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGasFeeCap requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGasFeeCap: %w", err)
	}
	return oldValue.GasFeeCap, nil
}

// ResetGasFeeCap resets all changes to the "gasFeeCap" field.
func (m *TransactionMutation) ResetGasFeeCap() {
	m.gasFeeCap = nil
}

// SetValue sets the "value" field.
func (m *TransactionMutation) SetValue(s string) {
	m.value = &s
}

// Value returns the value of the "value" field in the mutation.
func (m *TransactionMutation) Value() (r string, exists bool) {
	v := m.value
	if v == nil {
		return
	}
	return *v, true
}

// OldValue returns the old "value" field's value of the Transaction entity.
// If the Transaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransactionMutation) OldValue(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValue: %w", err)
	}
	return oldValue.Value, nil
}

// ResetValue resets all changes to the "value" field.
func (m *TransactionMutation) ResetValue() {
	m.value = nil
}

// SetData sets the "data" field.
func (m *TransactionMutation) SetData(s string) {
	m.data = &s
}

// Data returns the value of the "data" field in the mutation.
func (m *TransactionMutation) Data() (r string, exists bool) {
	v := m.data
	if v == nil {
		return
	}
	return *v, true
}

// OldData returns the old "data" field's value of the Transaction entity.
// If the Transaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransactionMutation) OldData(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldData is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldData requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldData: %w", err)
	}
	return oldValue.Data, nil
}

// ClearData clears the value of the "data" field.
func (m *TransactionMutation) ClearData() {
	m.data = nil
	m.clearedFields[transaction.FieldData] = struct{}{}
}

// DataCleared returns if the "data" field was cleared in this mutation.
func (m *TransactionMutation) DataCleared() bool {
	_, ok := m.clearedFields[transaction.FieldData]
	return ok
}

// ResetData resets all changes to the "data" field.
func (m *TransactionMutation) ResetData() {
	m.data = nil
	delete(m.clearedFields, transaction.FieldData)
}

// SetHash sets the "hash" field.
func (m *TransactionMutation) SetHash(s string) {
	m.hash = &s
}

// Hash returns the value of the "hash" field in the mutation.
func (m *TransactionMutation) Hash() (r string, exists bool) {
	v := m.hash
	if v == nil {
		return
	}
	return *v, true
}

// OldHash returns the old "hash" field's value of the Transaction entity.
// If the Transaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransactionMutation) OldHash(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHash is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHash requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHash: %w", err)
	}
	return oldValue.Hash, nil
}

// ResetHash resets all changes to the "hash" field.
func (m *TransactionMutation) ResetHash() {
	m.hash = nil
}

// Where appends a list predicates to the TransactionMutation builder.
func (m *TransactionMutation) Where(ps ...predicate.Transaction) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TransactionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TransactionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Transaction, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TransactionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TransactionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Transaction).
func (m *TransactionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TransactionMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m._type != nil {
		fields = append(fields, transaction.FieldType)
	}
	if m.chain_id != nil {
		fields = append(fields, transaction.FieldChainID)
	}
	if m.nonce != nil {
		fields = append(fields, transaction.FieldNonce)
	}
	if m.to != nil {
		fields = append(fields, transaction.FieldTo)
	}
	if m.gas != nil {
		fields = append(fields, transaction.FieldGas)
	}
	if m.gasPrice != nil {
		fields = append(fields, transaction.FieldGasPrice)
	}
	if m.gasTipCap != nil {
		fields = append(fields, transaction.FieldGasTipCap)
	}
	if m.gasFeeCap != nil {
		fields = append(fields, transaction.FieldGasFeeCap)
	}
	if m.value != nil {
		fields = append(fields, transaction.FieldValue)
	}
	if m.data != nil {
		fields = append(fields, transaction.FieldData)
	}
	if m.hash != nil {
		fields = append(fields, transaction.FieldHash)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TransactionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case transaction.FieldType:
		return m.GetType()
	case transaction.FieldChainID:
		return m.ChainID()
	case transaction.FieldNonce:
		return m.Nonce()
	case transaction.FieldTo:
		return m.To()
	case transaction.FieldGas:
		return m.Gas()
	case transaction.FieldGasPrice:
		return m.GasPrice()
	case transaction.FieldGasTipCap:
		return m.GasTipCap()
	case transaction.FieldGasFeeCap:
		return m.GasFeeCap()
	case transaction.FieldValue:
		return m.Value()
	case transaction.FieldData:
		return m.Data()
	case transaction.FieldHash:
		return m.Hash()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TransactionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case transaction.FieldType:
		return m.OldType(ctx)
	case transaction.FieldChainID:
		return m.OldChainID(ctx)
	case transaction.FieldNonce:
		return m.OldNonce(ctx)
	case transaction.FieldTo:
		return m.OldTo(ctx)
	case transaction.FieldGas:
		return m.OldGas(ctx)
	case transaction.FieldGasPrice:
		return m.OldGasPrice(ctx)
	case transaction.FieldGasTipCap:
		return m.OldGasTipCap(ctx)
	case transaction.FieldGasFeeCap:
		return m.OldGasFeeCap(ctx)
	case transaction.FieldValue:
		return m.OldValue(ctx)
	case transaction.FieldData:
		return m.OldData(ctx)
	case transaction.FieldHash:
		return m.OldHash(ctx)
	}
	return nil, fmt.Errorf("unknown Transaction field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TransactionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case transaction.FieldType:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case transaction.FieldChainID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChainID(v)
		return nil
	case transaction.FieldNonce:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNonce(v)
		return nil
	case transaction.FieldTo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTo(v)
		return nil
	case transaction.FieldGas:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGas(v)
		return nil
	case transaction.FieldGasPrice:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGasPrice(v)
		return nil
	case transaction.FieldGasTipCap:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGasTipCap(v)
		return nil
	case transaction.FieldGasFeeCap:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGasFeeCap(v)
		return nil
	case transaction.FieldValue:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValue(v)
		return nil
	case transaction.FieldData:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetData(v)
		return nil
	case transaction.FieldHash:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHash(v)
		return nil
	}
	return fmt.Errorf("unknown Transaction field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TransactionMutation) AddedFields() []string {
	var fields []string
	if m.add_type != nil {
		fields = append(fields, transaction.FieldType)
	}
	if m.addchain_id != nil {
		fields = append(fields, transaction.FieldChainID)
	}
	if m.addnonce != nil {
		fields = append(fields, transaction.FieldNonce)
	}
	if m.addgas != nil {
		fields = append(fields, transaction.FieldGas)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TransactionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case transaction.FieldType:
		return m.AddedType()
	case transaction.FieldChainID:
		return m.AddedChainID()
	case transaction.FieldNonce:
		return m.AddedNonce()
	case transaction.FieldGas:
		return m.AddedGas()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TransactionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case transaction.FieldType:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddType(v)
		return nil
	case transaction.FieldChainID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddChainID(v)
		return nil
	case transaction.FieldNonce:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddNonce(v)
		return nil
	case transaction.FieldGas:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddGas(v)
		return nil
	}
	return fmt.Errorf("unknown Transaction numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TransactionMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(transaction.FieldData) {
		fields = append(fields, transaction.FieldData)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TransactionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TransactionMutation) ClearField(name string) error {
	switch name {
	case transaction.FieldData:
		m.ClearData()
		return nil
	}
	return fmt.Errorf("unknown Transaction nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TransactionMutation) ResetField(name string) error {
	switch name {
	case transaction.FieldType:
		m.ResetType()
		return nil
	case transaction.FieldChainID:
		m.ResetChainID()
		return nil
	case transaction.FieldNonce:
		m.ResetNonce()
		return nil
	case transaction.FieldTo:
		m.ResetTo()
		return nil
	case transaction.FieldGas:
		m.ResetGas()
		return nil
	case transaction.FieldGasPrice:
		m.ResetGasPrice()
		return nil
	case transaction.FieldGasTipCap:
		m.ResetGasTipCap()
		return nil
	case transaction.FieldGasFeeCap:
		m.ResetGasFeeCap()
		return nil
	case transaction.FieldValue:
		m.ResetValue()
		return nil
	case transaction.FieldData:
		m.ResetData()
		return nil
	case transaction.FieldHash:
		m.ResetHash()
		return nil
	}
	return fmt.Errorf("unknown Transaction field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TransactionMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TransactionMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TransactionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TransactionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TransactionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TransactionMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TransactionMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Transaction unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TransactionMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Transaction edge %s", name)
}
