// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ddr4869/ether-go/ent/transaction"
)

// TransactionCreate is the builder for creating a Transaction entity.
type TransactionCreate struct {
	config
	mutation *TransactionMutation
	hooks    []Hook
}

// SetType sets the "type" field.
func (tc *TransactionCreate) SetType(i int) *TransactionCreate {
	tc.mutation.SetType(i)
	return tc
}

// SetChainID sets the "chain_id" field.
func (tc *TransactionCreate) SetChainID(i int) *TransactionCreate {
	tc.mutation.SetChainID(i)
	return tc
}

// SetNonce sets the "nonce" field.
func (tc *TransactionCreate) SetNonce(i int) *TransactionCreate {
	tc.mutation.SetNonce(i)
	return tc
}

// SetTo sets the "to" field.
func (tc *TransactionCreate) SetTo(s string) *TransactionCreate {
	tc.mutation.SetTo(s)
	return tc
}

// SetGas sets the "gas" field.
func (tc *TransactionCreate) SetGas(i int) *TransactionCreate {
	tc.mutation.SetGas(i)
	return tc
}

// SetGasPrice sets the "gasPrice" field.
func (tc *TransactionCreate) SetGasPrice(s string) *TransactionCreate {
	tc.mutation.SetGasPrice(s)
	return tc
}

// SetGasTipCap sets the "gasTipCap" field.
func (tc *TransactionCreate) SetGasTipCap(s string) *TransactionCreate {
	tc.mutation.SetGasTipCap(s)
	return tc
}

// SetGasFeeCap sets the "gasFeeCap" field.
func (tc *TransactionCreate) SetGasFeeCap(s string) *TransactionCreate {
	tc.mutation.SetGasFeeCap(s)
	return tc
}

// SetValue sets the "value" field.
func (tc *TransactionCreate) SetValue(s string) *TransactionCreate {
	tc.mutation.SetValue(s)
	return tc
}

// SetData sets the "data" field.
func (tc *TransactionCreate) SetData(s string) *TransactionCreate {
	tc.mutation.SetData(s)
	return tc
}

// SetNillableData sets the "data" field if the given value is not nil.
func (tc *TransactionCreate) SetNillableData(s *string) *TransactionCreate {
	if s != nil {
		tc.SetData(*s)
	}
	return tc
}

// SetHash sets the "hash" field.
func (tc *TransactionCreate) SetHash(s string) *TransactionCreate {
	tc.mutation.SetHash(s)
	return tc
}

// Mutation returns the TransactionMutation object of the builder.
func (tc *TransactionCreate) Mutation() *TransactionMutation {
	return tc.mutation
}

// Save creates the Transaction in the database.
func (tc *TransactionCreate) Save(ctx context.Context) (*Transaction, error) {
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TransactionCreate) SaveX(ctx context.Context) *Transaction {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TransactionCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TransactionCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TransactionCreate) check() error {
	if _, ok := tc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Transaction.type"`)}
	}
	if _, ok := tc.mutation.ChainID(); !ok {
		return &ValidationError{Name: "chain_id", err: errors.New(`ent: missing required field "Transaction.chain_id"`)}
	}
	if _, ok := tc.mutation.Nonce(); !ok {
		return &ValidationError{Name: "nonce", err: errors.New(`ent: missing required field "Transaction.nonce"`)}
	}
	if _, ok := tc.mutation.To(); !ok {
		return &ValidationError{Name: "to", err: errors.New(`ent: missing required field "Transaction.to"`)}
	}
	if _, ok := tc.mutation.Gas(); !ok {
		return &ValidationError{Name: "gas", err: errors.New(`ent: missing required field "Transaction.gas"`)}
	}
	if _, ok := tc.mutation.GasPrice(); !ok {
		return &ValidationError{Name: "gasPrice", err: errors.New(`ent: missing required field "Transaction.gasPrice"`)}
	}
	if _, ok := tc.mutation.GasTipCap(); !ok {
		return &ValidationError{Name: "gasTipCap", err: errors.New(`ent: missing required field "Transaction.gasTipCap"`)}
	}
	if _, ok := tc.mutation.GasFeeCap(); !ok {
		return &ValidationError{Name: "gasFeeCap", err: errors.New(`ent: missing required field "Transaction.gasFeeCap"`)}
	}
	if _, ok := tc.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`ent: missing required field "Transaction.value"`)}
	}
	if _, ok := tc.mutation.Hash(); !ok {
		return &ValidationError{Name: "hash", err: errors.New(`ent: missing required field "Transaction.hash"`)}
	}
	return nil
}

func (tc *TransactionCreate) sqlSave(ctx context.Context) (*Transaction, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TransactionCreate) createSpec() (*Transaction, *sqlgraph.CreateSpec) {
	var (
		_node = &Transaction{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(transaction.Table, sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt))
	)
	if value, ok := tc.mutation.GetType(); ok {
		_spec.SetField(transaction.FieldType, field.TypeInt, value)
		_node.Type = value
	}
	if value, ok := tc.mutation.ChainID(); ok {
		_spec.SetField(transaction.FieldChainID, field.TypeInt, value)
		_node.ChainID = value
	}
	if value, ok := tc.mutation.Nonce(); ok {
		_spec.SetField(transaction.FieldNonce, field.TypeInt, value)
		_node.Nonce = value
	}
	if value, ok := tc.mutation.To(); ok {
		_spec.SetField(transaction.FieldTo, field.TypeString, value)
		_node.To = value
	}
	if value, ok := tc.mutation.Gas(); ok {
		_spec.SetField(transaction.FieldGas, field.TypeInt, value)
		_node.Gas = value
	}
	if value, ok := tc.mutation.GasPrice(); ok {
		_spec.SetField(transaction.FieldGasPrice, field.TypeString, value)
		_node.GasPrice = value
	}
	if value, ok := tc.mutation.GasTipCap(); ok {
		_spec.SetField(transaction.FieldGasTipCap, field.TypeString, value)
		_node.GasTipCap = value
	}
	if value, ok := tc.mutation.GasFeeCap(); ok {
		_spec.SetField(transaction.FieldGasFeeCap, field.TypeString, value)
		_node.GasFeeCap = value
	}
	if value, ok := tc.mutation.Value(); ok {
		_spec.SetField(transaction.FieldValue, field.TypeString, value)
		_node.Value = value
	}
	if value, ok := tc.mutation.Data(); ok {
		_spec.SetField(transaction.FieldData, field.TypeString, value)
		_node.Data = value
	}
	if value, ok := tc.mutation.Hash(); ok {
		_spec.SetField(transaction.FieldHash, field.TypeString, value)
		_node.Hash = value
	}
	return _node, _spec
}

// TransactionCreateBulk is the builder for creating many Transaction entities in bulk.
type TransactionCreateBulk struct {
	config
	err      error
	builders []*TransactionCreate
}

// Save creates the Transaction entities in the database.
func (tcb *TransactionCreateBulk) Save(ctx context.Context) ([]*Transaction, error) {
	if tcb.err != nil {
		return nil, tcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Transaction, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TransactionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TransactionCreateBulk) SaveX(ctx context.Context) []*Transaction {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TransactionCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TransactionCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}
