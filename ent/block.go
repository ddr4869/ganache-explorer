// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ddr4869/ganache-explorer/ent/block"
)

// Block is the model entity for the Block schema.
type Block struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Number holds the value of the "number" field.
	Number int `json:"number,omitempty"`
	// GasLimit holds the value of the "gas_limit" field.
	GasLimit int `json:"gas_limit,omitempty"`
	// GasUsed holds the value of the "gas_used" field.
	GasUsed int `json:"gas_used,omitempty"`
	// Difficulty holds the value of the "difficulty" field.
	Difficulty int `json:"difficulty,omitempty"`
	// Time holds the value of the "time" field.
	Time uint64 `json:"time,omitempty"`
	// NumberU64 holds the value of the "number_u64" field.
	NumberU64 uint64 `json:"number_u64,omitempty"`
	// MixDigest holds the value of the "mix_digest" field.
	MixDigest string `json:"mix_digest,omitempty"`
	// Nonce holds the value of the "nonce" field.
	Nonce int `json:"nonce,omitempty"`
	// Coinbase holds the value of the "coinbase" field.
	Coinbase string `json:"coinbase,omitempty"`
	// Root holds the value of the "root" field.
	Root string `json:"root,omitempty"`
	// ParentHash holds the value of the "parent_hash" field.
	ParentHash string `json:"parent_hash,omitempty"`
	// TxHash holds the value of the "tx_hash" field.
	TxHash string `json:"tx_hash,omitempty"`
	// ReceiptHash holds the value of the "receipt_hash" field.
	ReceiptHash string `json:"receipt_hash,omitempty"`
	// UncleHash holds the value of the "uncle_hash" field.
	UncleHash string `json:"uncle_hash,omitempty"`
	// TxCount holds the value of the "tx_count" field.
	TxCount      int `json:"tx_count,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Block) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case block.FieldID, block.FieldNumber, block.FieldGasLimit, block.FieldGasUsed, block.FieldDifficulty, block.FieldTime, block.FieldNumberU64, block.FieldNonce, block.FieldTxCount:
			values[i] = new(sql.NullInt64)
		case block.FieldMixDigest, block.FieldCoinbase, block.FieldRoot, block.FieldParentHash, block.FieldTxHash, block.FieldReceiptHash, block.FieldUncleHash:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Block fields.
func (b *Block) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case block.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			b.ID = int(value.Int64)
		case block.FieldNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field number", values[i])
			} else if value.Valid {
				b.Number = int(value.Int64)
			}
		case block.FieldGasLimit:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field gas_limit", values[i])
			} else if value.Valid {
				b.GasLimit = int(value.Int64)
			}
		case block.FieldGasUsed:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field gas_used", values[i])
			} else if value.Valid {
				b.GasUsed = int(value.Int64)
			}
		case block.FieldDifficulty:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field difficulty", values[i])
			} else if value.Valid {
				b.Difficulty = int(value.Int64)
			}
		case block.FieldTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field time", values[i])
			} else if value.Valid {
				b.Time = uint64(value.Int64)
			}
		case block.FieldNumberU64:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field number_u64", values[i])
			} else if value.Valid {
				b.NumberU64 = uint64(value.Int64)
			}
		case block.FieldMixDigest:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mix_digest", values[i])
			} else if value.Valid {
				b.MixDigest = value.String
			}
		case block.FieldNonce:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field nonce", values[i])
			} else if value.Valid {
				b.Nonce = int(value.Int64)
			}
		case block.FieldCoinbase:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field coinbase", values[i])
			} else if value.Valid {
				b.Coinbase = value.String
			}
		case block.FieldRoot:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field root", values[i])
			} else if value.Valid {
				b.Root = value.String
			}
		case block.FieldParentHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field parent_hash", values[i])
			} else if value.Valid {
				b.ParentHash = value.String
			}
		case block.FieldTxHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tx_hash", values[i])
			} else if value.Valid {
				b.TxHash = value.String
			}
		case block.FieldReceiptHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field receipt_hash", values[i])
			} else if value.Valid {
				b.ReceiptHash = value.String
			}
		case block.FieldUncleHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uncle_hash", values[i])
			} else if value.Valid {
				b.UncleHash = value.String
			}
		case block.FieldTxCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tx_count", values[i])
			} else if value.Valid {
				b.TxCount = int(value.Int64)
			}
		default:
			b.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Block.
// This includes values selected through modifiers, order, etc.
func (b *Block) Value(name string) (ent.Value, error) {
	return b.selectValues.Get(name)
}

// Update returns a builder for updating this Block.
// Note that you need to call Block.Unwrap() before calling this method if this Block
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Block) Update() *BlockUpdateOne {
	return NewBlockClient(b.config).UpdateOne(b)
}

// Unwrap unwraps the Block entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Block) Unwrap() *Block {
	_tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Block is not a transactional entity")
	}
	b.config.driver = _tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Block) String() string {
	var builder strings.Builder
	builder.WriteString("Block(")
	builder.WriteString(fmt.Sprintf("id=%v, ", b.ID))
	builder.WriteString("number=")
	builder.WriteString(fmt.Sprintf("%v", b.Number))
	builder.WriteString(", ")
	builder.WriteString("gas_limit=")
	builder.WriteString(fmt.Sprintf("%v", b.GasLimit))
	builder.WriteString(", ")
	builder.WriteString("gas_used=")
	builder.WriteString(fmt.Sprintf("%v", b.GasUsed))
	builder.WriteString(", ")
	builder.WriteString("difficulty=")
	builder.WriteString(fmt.Sprintf("%v", b.Difficulty))
	builder.WriteString(", ")
	builder.WriteString("time=")
	builder.WriteString(fmt.Sprintf("%v", b.Time))
	builder.WriteString(", ")
	builder.WriteString("number_u64=")
	builder.WriteString(fmt.Sprintf("%v", b.NumberU64))
	builder.WriteString(", ")
	builder.WriteString("mix_digest=")
	builder.WriteString(b.MixDigest)
	builder.WriteString(", ")
	builder.WriteString("nonce=")
	builder.WriteString(fmt.Sprintf("%v", b.Nonce))
	builder.WriteString(", ")
	builder.WriteString("coinbase=")
	builder.WriteString(b.Coinbase)
	builder.WriteString(", ")
	builder.WriteString("root=")
	builder.WriteString(b.Root)
	builder.WriteString(", ")
	builder.WriteString("parent_hash=")
	builder.WriteString(b.ParentHash)
	builder.WriteString(", ")
	builder.WriteString("tx_hash=")
	builder.WriteString(b.TxHash)
	builder.WriteString(", ")
	builder.WriteString("receipt_hash=")
	builder.WriteString(b.ReceiptHash)
	builder.WriteString(", ")
	builder.WriteString("uncle_hash=")
	builder.WriteString(b.UncleHash)
	builder.WriteString(", ")
	builder.WriteString("tx_count=")
	builder.WriteString(fmt.Sprintf("%v", b.TxCount))
	builder.WriteByte(')')
	return builder.String()
}

// Blocks is a parsable slice of Block.
type Blocks []*Block
