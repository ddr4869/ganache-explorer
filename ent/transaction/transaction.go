// Code generated by ent, DO NOT EDIT.

package transaction

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the transaction type in the database.
	Label = "transaction"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldBlockNumber holds the string denoting the block_number field in the database.
	FieldBlockNumber = "block_number"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldChainID holds the string denoting the chain_id field in the database.
	FieldChainID = "chain_id"
	// FieldNonce holds the string denoting the nonce field in the database.
	FieldNonce = "nonce"
	// FieldTo holds the string denoting the to field in the database.
	FieldTo = "to"
	// FieldGas holds the string denoting the gas field in the database.
	FieldGas = "gas"
	// FieldGasPrice holds the string denoting the gasprice field in the database.
	FieldGasPrice = "gas_price"
	// FieldGasTipCap holds the string denoting the gastipcap field in the database.
	FieldGasTipCap = "gas_tip_cap"
	// FieldGasFeeCap holds the string denoting the gasfeecap field in the database.
	FieldGasFeeCap = "gas_fee_cap"
	// FieldValue holds the string denoting the value field in the database.
	FieldValue = "value"
	// FieldData holds the string denoting the data field in the database.
	FieldData = "data"
	// FieldHash holds the string denoting the hash field in the database.
	FieldHash = "hash"
	// Table holds the table name of the transaction in the database.
	Table = "transactions"
)

// Columns holds all SQL columns for transaction fields.
var Columns = []string{
	FieldID,
	FieldBlockNumber,
	FieldType,
	FieldChainID,
	FieldNonce,
	FieldTo,
	FieldGas,
	FieldGasPrice,
	FieldGasTipCap,
	FieldGasFeeCap,
	FieldValue,
	FieldData,
	FieldHash,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// BlockNumberValidator is a validator for the "block_number" field. It is called by the builders before save.
	BlockNumberValidator func(int) error
)

// OrderOption defines the ordering options for the Transaction queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByBlockNumber orders the results by the block_number field.
func ByBlockNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBlockNumber, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByChainID orders the results by the chain_id field.
func ByChainID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChainID, opts...).ToFunc()
}

// ByNonce orders the results by the nonce field.
func ByNonce(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNonce, opts...).ToFunc()
}

// ByTo orders the results by the to field.
func ByTo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTo, opts...).ToFunc()
}

// ByGas orders the results by the gas field.
func ByGas(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGas, opts...).ToFunc()
}

// ByGasPrice orders the results by the gasPrice field.
func ByGasPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGasPrice, opts...).ToFunc()
}

// ByGasTipCap orders the results by the gasTipCap field.
func ByGasTipCap(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGasTipCap, opts...).ToFunc()
}

// ByGasFeeCap orders the results by the gasFeeCap field.
func ByGasFeeCap(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGasFeeCap, opts...).ToFunc()
}

// ByValue orders the results by the value field.
func ByValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldValue, opts...).ToFunc()
}

// ByData orders the results by the data field.
func ByData(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldData, opts...).ToFunc()
}

// ByHash orders the results by the hash field.
func ByHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHash, opts...).ToFunc()
}
